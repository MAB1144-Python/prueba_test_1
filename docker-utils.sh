#!/bin/bash
# Scripts de utilidad para Docker Compose

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}Website Design Evaluator - Docker Utility${NC}"
    echo "=========================================="
    echo
    echo "Uso: $0 [COMANDO] [OPCIONES]"
    echo
    echo "Comandos disponibles:"
    echo "  build       - Construir las im√°genes Docker"
    echo "  up          - Iniciar servicios completos"
    echo "  dev         - Iniciar modo desarrollo (con Jupyter)"
    echo "  api         - Iniciar solo API y dependencias"
    echo "  evaluate    - Ejecutar evaluaci√≥n de un sitio"
    echo "  batch       - Ejecutar evaluaci√≥n en lote"
    echo "  demo        - Ejecutar demostraci√≥n"
    echo "  test        - Ejecutar pruebas"
    echo "  logs        - Ver logs de servicios"
    echo "  stop        - Detener todos los servicios"
    echo "  clean       - Limpiar contenedores y vol√∫menes"
    echo "  monitor     - Iniciar servicios de monitoreo"
    echo "  status      - Ver estado de servicios"
    echo
    echo "Ejemplos:"
    echo "  $0 evaluate https://www.google.com"
    echo "  $0 batch example_urls.txt"
    echo "  $0 up"
    echo "  $0 dev"
}

# Funci√≥n para construir im√°genes
build() {
    echo -e "${BLUE}üî® Construyendo im√°genes Docker...${NC}"
    docker-compose build
    echo -e "${GREEN}‚úÖ Im√°genes construidas exitosamente${NC}"
}

# Funci√≥n para iniciar servicios completos
up() {
    echo -e "${BLUE}üöÄ Iniciando servicios completos...${NC}"
    docker-compose --profile full up -d
    echo -e "${GREEN}‚úÖ Servicios iniciados${NC}"
    echo -e "${YELLOW}üìä MongoDB: http://localhost:27017${NC}"
    echo -e "${YELLOW}üî• Redis: localhost:6379${NC}"
}

# Funci√≥n para modo desarrollo
dev() {
    echo -e "${BLUE}üíª Iniciando modo desarrollo...${NC}"
    docker-compose --profile dev up -d
    echo -e "${GREEN}‚úÖ Modo desarrollo iniciado${NC}"
    echo -e "${YELLOW}üìì Jupyter Lab: http://localhost:8888${NC}"
}

# Funci√≥n para API
api() {
    echo -e "${BLUE}üåê Iniciando servicios API...${NC}"
    docker-compose --profile api up -d
    echo -e "${GREEN}‚úÖ Servicios API iniciados${NC}"
    echo -e "${YELLOW}üîó API: http://localhost:8000${NC}"
}

# Funci√≥n para evaluaci√≥n individual
evaluate() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Error: URL requerida${NC}"
        echo "Uso: $0 evaluate <URL>"
        exit 1
    fi
    
    echo -e "${BLUE}üîç Evaluando: $1${NC}"
    docker-compose run --rm website-evaluator python main.py "$1"
}

# Funci√≥n para evaluaci√≥n en lote
batch() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Error: Archivo de URLs requerido${NC}"
        echo "Uso: $0 batch <archivo_urls>"
        exit 1
    fi
    
    if [ ! -f "$1" ]; then
        echo -e "${RED}‚ùå Error: Archivo no encontrado: $1${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üìã Evaluaci√≥n en lote desde: $1${NC}"
    docker-compose run --rm website-evaluator python main.py --batch "$1"
}

# Funci√≥n para demo
demo() {
    echo -e "${BLUE}üé¨ Ejecutando demostraci√≥n...${NC}"
    docker-compose run --rm website-evaluator python demo.py
}

# Funci√≥n para pruebas
test() {
    echo -e "${BLUE}üß™ Ejecutando pruebas...${NC}"
    docker-compose run --rm website-evaluator python tests/test_evaluator.py
}

# Funci√≥n para ver logs
logs() {
    if [ -z "$1" ]; then
        docker-compose logs -f
    else
        docker-compose logs -f "$1"
    fi
}

# Funci√≥n para detener servicios
stop() {
    echo -e "${BLUE}‚èπÔ∏è  Deteniendo servicios...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Servicios detenidos${NC}"
}

# Funci√≥n para limpiar
clean() {
    echo -e "${YELLOW}‚ö†Ô∏è  ¬øEst√°s seguro que quieres limpiar todos los contenedores y vol√∫menes? (y/N)${NC}"
    read -r response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        echo -e "${BLUE}üßπ Limpiando contenedores y vol√∫menes...${NC}"
        docker-compose down -v --remove-orphans
        docker system prune -f
        echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
    else
        echo -e "${YELLOW}Operaci√≥n cancelada${NC}"
    fi
}

# Funci√≥n para monitoreo
monitor() {
    echo -e "${BLUE}üìä Iniciando servicios de monitoreo...${NC}"
    docker-compose --profile monitoring up -d
    echo -e "${GREEN}‚úÖ Servicios de monitoreo iniciados${NC}"
    echo -e "${YELLOW}üìà Prometheus: http://localhost:9090${NC}"
    echo -e "${YELLOW}üìä Grafana: http://localhost:3000 (admin:admin123)${NC}"
}

# Funci√≥n para estado
status() {
    echo -e "${BLUE}üìã Estado de servicios:${NC}"
    docker-compose ps
}

# Parsear comando
case "$1" in
    build)
        build
        ;;
    up)
        up
        ;;
    dev)
        dev
        ;;
    api)
        api
        ;;
    evaluate)
        evaluate "$2"
        ;;
    batch)
        batch "$2"
        ;;
    demo)
        demo
        ;;
    test)
        test
        ;;
    logs)
        logs "$2"
        ;;
    stop)
        stop
        ;;
    clean)
        clean
        ;;
    monitor)
        monitor
        ;;
    status)
        status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Comando desconocido: $1${NC}"
        echo
        show_help
        exit 1
        ;;
esac